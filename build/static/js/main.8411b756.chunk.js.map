{"version":3,"sources":["features/userSlice.js","features/chatSlice.js","firebase.js","SidebarChat.js","Sidebar.js","Message.js","chat.js","Imessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","chatSlice","chatId","chatName","setChat","selectChatName","chat","selectChatId","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","dispatch","useDispatch","useState","chatInfo","setChatInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","className","Avatar","src","photo","message","timeago","Date","timestamp","toDate","Sidebar","useSelector","chats","setChats","signOut","placeholder","IconButton","variant","prompt","add","key","Message","forwardRef","ref","contents","email","displayName","uid","toLocaleString","Chat","input","setInput","messages","setMessages","value","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","Imessage","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8411b756.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const chatSlice = createSlice({\r\n  name: \"chat\",\r\n  initialState: {\r\n    chatId: null,\r\n    chatName: null,\r\n  },\r\n  reducers: {\r\n    setChat: (state, action) => {\r\n      state.chatId = action.payload.chatId;\r\n      state.chatName = action.payload.chatName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChat } = chatSlice.actions;\r\n\r\nexport const selectChatName = (state) => state.chat.chatName;\r\nexport const selectChatId = (state) => state.chat.chatId;\r\n\r\nexport default chatSlice.reducer;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCq2mXkPqbrY6cmcCiiTAI0Cv_f1Pf_mDA\",\r\n  authDomain: \"imessage-clone-hanbalahmed.firebaseapp.com\",\r\n  databaseURL: \"https://imessage-clone-hanbalahmed.firebaseio.com\",\r\n  projectId: \"imessage-clone-hanbalahmed\",\r\n  storageBucket: \"imessage-clone-hanbalahmed.appspot.com\",\r\n  messagingSenderId: \"77981789352\",\r\n  appId: \"1:77981789352:web:d98228c1b9b4a565b8269d\",\r\n  measurementId: \"G-JC6LVS40ZN\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChat } from \"./features/chatSlice\";\r\nimport db from \"./firebase\";\r\nimport \"./SidebarChat.css\";\r\nimport * as timeago from \"timeago.js\";\r\n\r\nfunction SidebarChat({ id, chatName }) {\r\n  const dispatch = useDispatch();\r\n  const [chatInfo, setChatInfo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"chats\")\r\n      .doc(id)\r\n      .collection(\"messages\")\r\n      .orderBy(\"timestamp\", \"desc\")\r\n      .onSnapshot((snapshot) =>\r\n        setChatInfo(snapshot.docs.map((doc) => doc.data()))\r\n      );\r\n  }, [id]);\r\n\r\n  return (\r\n    <div\r\n      onClick={() =>\r\n        dispatch(\r\n          setChat({\r\n            chatId: id,\r\n            chatName: chatName,\r\n          })\r\n        )\r\n      }\r\n      className=\"sidebarChat\"\r\n    >\r\n      <Avatar src={chatInfo[0]?.photo} />\r\n      <div className=\"sidebarChat__info\">\r\n        <h3>{chatName}</h3>\r\n        <p>{chatInfo[0]?.message}</p>\r\n        <small>\r\n          {timeago.format(new Date(chatInfo[0]?.timestamp?.toDate()))}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db, { auth } from \"./firebase\";\r\nimport \"./Sidebar.css\";\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"chats\").onSnapshot((snapshot) =>\r\n      setChats(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const addChat = () => {\r\n    const chatName = prompt(\"Please enter a chat name\");\r\n\r\n    if (chatName) {\r\n      db.collection(\"chats\").add({\r\n        chatName: chatName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar\r\n          onClick={() => auth.signOut()}\r\n          src={user.photo}\r\n          className=\"sidebar__avatar\"\r\n        />\r\n        <div className=\"sidebar__input\">\r\n          <SearchIcon />\r\n          <input placeholder=\"Search\" />\r\n        </div>\r\n\r\n        <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">\r\n          <RateReviewOutlinedIcon className=\"red\" onClick={addChat} />\r\n        </IconButton>\r\n      </div>\r\n\r\n      <div className=\"sidebar__chats\">\r\n        {chats.map(({ id, data: { chatName } }) => (\r\n          <SidebarChat key={id} id={id} chatName={chatName} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { forwardRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport \"./Message.css\";\r\n\r\nconst Message = forwardRef(\r\n  (\r\n    { id, contents: { timestamp, displayName, email, message, photo, uid } },\r\n    ref\r\n  ) => {\r\n    const user = useSelector(selectUser);\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={`message ${user.email === email && \"message__sender\"}`}\r\n      >\r\n        <Avatar className=\"message__photo\" src={photo} />\r\n        <p>{message}</p>\r\n        <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Message;\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport MicNoneIcon from \"@material-ui/icons/MicNone\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./Chat.css\";\r\nimport { selectChatId, selectChatName } from \"./features/chatSlice\";\r\nimport db from \"./firebase\";\r\nimport Message from \"./Message\";\r\nimport firebase from \"firebase\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const [input, setInput] = useState(\"\");\r\n  const chatName = useSelector(selectChatName);\r\n  const chatId = useSelector(selectChatId);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (chatId) {\r\n      db.collection(\"chats\")\r\n        .doc(chatId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(\r\n            snapshot.docs.map((doc) => ({\r\n              id: doc.id,\r\n              data: doc.data(),\r\n            }))\r\n          )\r\n        );\r\n    }\r\n  }, [chatId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      message: input,\r\n      uid: user.uid,\r\n      photo: user.photo,\r\n      email: user.email,\r\n      displayName: user.displayName,\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <h4>\r\n          To: <span className=\"chat__name\">{chatName}</span>\r\n        </h4>\r\n        <strong>Details</strong>\r\n      </div>\r\n\r\n      {/* chat messages */}\r\n      <div className=\"chat__messages\">\r\n        <FlipMove>\r\n          {messages.map(({ id, data }) => (\r\n            <Message key={id} contents={data} />\r\n          ))}\r\n        </FlipMove>\r\n      </div>\r\n\r\n      <div className=\"chat__input\">\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"send message\"\r\n            type=\"text\"\r\n          />\r\n          <button onClick={sendMessage}>Send Message</button>\r\n        </form>\r\n\r\n        <IconButton>\r\n          <MicNoneIcon className=\"chat__mic\" />\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport SideBar from \"./Sidebar\";\r\nimport Chat from \"./chat\";\r\nimport \"./Imessage.css\";\r\n\r\nfunction Imessage() {\r\n  return (\r\n    <div className=\"imessage\">\r\n      {/* sidebar */}\r\n      <SideBar />\r\n      {/* chat */}\r\n      <Chat />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Imessage;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport \"./Login.css\";\r\n\r\nfunction Login() {\r\n  const signIn = () => {\r\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__logo\">\r\n        <img\r\n          src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/a60c69b4-dbdc-49e3-b152-43bbdbfb0160/d6dy6qy-19e320f2-932f-4549-8050-2b7fb9289eda.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvYTYwYzY5YjQtZGJkYy00OWUzLWIxNTItNDNiYmRiZmIwMTYwXC9kNmR5NnF5LTE5ZTMyMGYyLTkzMmYtNDU0OS04MDUwLTJiN2ZiOTI4OWVkYS5wbmcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.AQSIo8n9g9HHLZFVdCwqbDOjFg9DwZI35LCTIuLgtEw\"\r\n          alt=\"\"\r\n        />\r\n        <h1>iMessage clone</h1>\r\n      </div>\r\n\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\nimport Imessage from \"./Imessage\";\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // user is logged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        // user is logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  });\r\n\r\n  return <div className=\"app\">{user ? <Imessage /> : <Login />}</div>;\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport chatReducer from \"../features/chatSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}